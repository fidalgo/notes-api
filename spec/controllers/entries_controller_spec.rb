require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::V1::EntriesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Entry. As you add validations to Entry, be sure to
  # adjust the attributes here as well.
  # let(:valid_attributes) {
  #   attributes_for(:entry)
  # }

  let(:invalid_attributes) {
    { line: '' }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EntriesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all entries as @entries" do
      entry = Entry.create! build(:entry).attributes
      get :index, {note_id: entry.note.id}, valid_session
      expect(assigns(:entries)).to eq([entry])
    end
  end

  describe "GET #show" do
    it "assigns the requested entry as @entry" do
      entry = Entry.create! build(:entry).attributes
      get :show, {id: entry.id, note_id: entry.note.id}, valid_session
      expect(assigns(:entry)).to eq(entry)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Entry" do
        expect {
          note = create(:note)
          post :create, {entry: build(:entry).attributes, note_id: note.id}, valid_session
        }.to change(Entry, :count).by(1)
      end

      it "assigns a newly created entry as @entry" do
        note = create(:note)
        post :create, {entry: build(:entry).attributes, note_id: note.id}, valid_session
        expect(assigns(:entry)).to be_a(Entry)
        expect(assigns(:entry)).to be_persisted
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved entry as @entry" do
        entry_attributes = build(:entry).attributes
        post :create, {entry: entry_attributes.merge(invalid_attributes), note_id: entry_attributes['note_id']}, valid_session
        expect(response).to have_http_status(422)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {line: "A totally new line" }
      }

      it "updates the requested entry" do
        entry = Entry.create! build(:entry).attributes
        put :update, {id: entry.to_param, entry: new_attributes, note_id: entry.note.id}, valid_session
        entry.reload
        expect(entry.line).to eq(new_attributes[:line])
      end

      it "assigns the requested entry as @entry" do
        entry = Entry.create! build(:entry).attributes
        put :update, {id: entry.to_param, entry: new_attributes, note_id: entry.note.id}, valid_session
        expect(assigns(:entry)).to eq(entry)
      end
    end

    context "with invalid params" do
      it "assigns the entry as @entry" do
        entry = Entry.create! build(:entry).attributes
        put :update, {id: entry.to_param, entry: invalid_attributes, note_id: entry.note.id}, valid_session
        expect(assigns(:entry)).to eq(entry)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested entry" do
      entry = Entry.create! build(:entry).attributes
      expect {
        delete :destroy, {id: entry.to_param, note_id: entry.note.id}, valid_session
      }.to change(Entry, :count).by(-1)
    end
  end

end
